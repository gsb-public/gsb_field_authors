<?php

/**
 * @file
 * Provides custom functionality related to authors.
 */

/**
 * Implements hook_menu().
 */
function gsb_field_authors_menu() {
  $items = array();
  $items['gsb-field-authors/visibility-update/%/%gsb_field_authors_entity_menu'] = array(
    'page callback' => 'gsb_field_authors_update_visibility',
    'page arguments' => array(2, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 2, 3),
    // This passes the $entity_type to the load function along with $entity_id.
    'load arguments' => array(2),
    // The callback will be returning AJAX, never HTML.
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu loader for an entity.
 */
function gsb_field_authors_entity_menu_load($entity_id, $entity_type) {
  return entity_load_single($entity_type, $entity_id);
}

/**
 * Updates the visibility of an author.
 */
function gsb_field_authors_update_visibility($entity_type, $entity) {
  if (!isset($_POST['profile_visibility_value']) || !is_numeric($_POST['profile_visibility_value'])) {
    return;
  }

  // Load the entity and save the new value.
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $wrapper->field_profile_visibility = $_POST['profile_visibility_value'];
  $wrapper->save();

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array('command' => 'gsb_field_authors_result'),
    ),
  );
}

/**
 * Implements hook_field_views_data_alter().
 */
function gsb_field_authors_field_views_data_alter(&$data, $field, $module) {
  if ($field['field_name'] == 'field_profile_visibility') {
    foreach ($data as $table_name => $table_data) {
      if (isset($table_data[$field['field_name']]['field'])) {
        $data[$table_name][$field['field_name']]['field']['handler'] = 'gsb_field_authors_handler_field_profile_visibility';
      }
    }
  }
}

/**
 * Returns the list of profile visibility options base on content type.
 * For publication we add the 'Featured' option
 */
function gsb_field_authors_get_allowed_profile_visibility($field, $instance, $entity_type, $entity, &$cacheable) {
  // This needs to be checked for every field.
  $cacheable = FALSE;

  // If this is a field collection item, use the bundle of the host entity.
  if ($entity instanceof FieldCollectionItemEntity) {
    $bundle = $entity->hostEntityBundle();
  }
  // Otherwise, extract it from the entity itself.
  elseif ($entity) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = '';
  }

  if ($bundle != 'publication') {
    return array(
      0 => 'Hidden',
      1 => 'Visible',
    );
  }
  else {
    return array(
      0 => 'Hidden',
      1 => 'Visible',
      2 => 'Featured',
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_field_authors_field_extra_fields() {
  $extra = array();
  $field_map = field_info_field_map();
  if (!empty($field_map['field_authors']['bundles']['node'])) {
    foreach ($field_map['field_authors']['bundles']['node'] as $node_type) {
      // Add an extra field for authors.
      $extra['node'][$node_type]['display']['gsb_feature_base_fields_faculty_authors'] = array(
        'label' => t('Faculty Authors'),
        'description' => t('The faculty authors'),
        'weight' => 0,
      );

    }
  }
  return $extra;
}

/**
 * Implements hook_field_attach_form().
 */
function gsb_field_authors_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // $langcode might be NULL.
  $langcode = $langcode ?: LANGUAGE_NONE;
  // If this is a field_authors field collection, and the entity reference is set,
  // setup the states for visibility
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_authors') {
    $map = array(
      'UseEntityReference' => array(
        'field_person_fac_single_ref',
        'field_profile_visibility',
      ),
      'Other' => array(
        'field_first_name',
        'field_last_name',
      ),
    );

    // Build up the location of the field in the form.
    $parents = $form['#parents'];
    $parents[] = 'field_person_fac_or_other';
    $parents[] = $langcode;
    $first = array_shift($parents);
    $parents = $first . '[' . implode('][', $parents) . ']';

    // Loop through each possible value for the field_person_fac_or_other field,
    // controlling the visibility of the dependent fields.
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . $parents . '"]' => array(
              array('value' => $value),
            ),
          ),
        );
      }
    }
    // remove "n/a" as an option for the fac_or_other
    unset($form['field_person_fac_or_other'][$langcode]['#options']['_none']);

    // If a parent node was specified, pre-fill the author field.
    if (($host_entity = $entity->hostEntity()) && !empty($host_entity->gsb_parent_node) && $parent_node = node_load($host_entity->gsb_parent_node)) {
      $form['field_person_fac_single_ref'][$langcode][0]['target_id']['#default_value'] = $parent_node->title . ' (' . $parent_node->nid . ')';
      $form['field_person_fac_or_other'][$langcode]['#default_value'] = 'UseEntityReference';

      // Prevent further fields from pre-filling with these values.
      unset($host_entity->gsb_parent_node);
    }
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function gsb_field_authors_field_attach_validate($entity_type, $entity, &$errors) {
  // If this is a field_authors field collection, ensure that it has at least
  // one author.
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_authors') {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    switch ($wrapper->field_person_fac_or_other->value()) {
      // If the author is using a reference, ensure one is set.
      case 'UseEntityReference':
        if (!$wrapper->field_person_fac_single_ref->value()) {
          $errors['field_person_fac_single_ref'][LANGUAGE_NONE][0][] = array(
            'error' => 'gsb_field_authors.field_authors.field_person_fac_single_ref',
            'message' => t('The author reference cannot be empty.'),
          );
        }
        break;

      // If the author is entered manually, ensure there is both a first and
      // last name.
      case 'Other':
        if (!$wrapper->field_first_name->value()) {
          $errors['field_first_name'][LANGUAGE_NONE][0][] = array(
            'error' => 'gsb_field_authors.field_authors.field_first_name',
            'message' => t('The author must have a first name.'),
          );
        }
        if (!$wrapper->field_last_name->value()) {
          $errors['field_last_name'][LANGUAGE_NONE][0][] = array(
            'error' => 'gsb_field_authors.field_authors.field_last_name',
            'message' => t('The author must have a last name.'),
          );
        }
        break;
    }
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function gsb_field_authors_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  // If this is a field_authors field collection, and it was set to use entity
  // reference, clear out the first and last name fields.
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_authors') {
    $items = field_get_items($entity_type, $entity, 'field_person_fac_or_other');
    switch ($items[0]['value']) {
      // If the author is using a reference, remove the first and last name.
      case 'UseEntityReference':
        $entity->field_first_name = NULL;
        $entity->field_last_name = NULL;
        break;

      // If the author is entered manually, remove the reference.
      case 'Other':
        $entity->field_person_fac_single_ref = NULL;
        break;

    }
  }
}

/**
 * Implements hook_node_view().
 */
function gsb_field_authors_node_view($node, $view_mode, $langcode) {
  $field_map = field_info_field_map();
  if (!isset($field_map['field_authors']['bundles']['node']) || array_search($node->type, $field_map['field_authors']['bundles']['node']) === FALSE) {
    return;
  }

  // If this field is not configured for this view mode, skip it.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  if (empty($fields['gsb_feature_base_fields_faculty_authors']['visible'])) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $faculty_authors = array();
  foreach ($wrapper->field_authors as $key => $author) {
    if (($faculty = $author->field_person_fac_single_ref) && $id = $faculty->getIdentifier()) {
      $view = $faculty->view('people_fpp');
      if (isset($view['node'][$id])) {
        $faculty_authors[$id] = $view['node'][$id];
        $faculty_authors[$id]['#weight'] = $key;
      }
    }
  }
  if (!empty($faculty_authors)) {
    $node->content['gsb_feature_base_fields_faculty_authors'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'faculty-author-wrapper',
          ),
        ),
        'label' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'label-above',
            ),
          ),
          '#children' => t('Faculty Authors'),
          '#weight' => -100,
        ),
      ) + $faculty_authors;
  }
}
