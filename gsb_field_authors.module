<?php

/**
 * @file
 * Provides custom functionality related to authors.
 */

/**
 * Implements hook_menu().
 */
function gsb_field_authors_menu() {
  $items = array();
  $items['gsb-field-authors/visibility-update/%/%gsb_field_authors_entity_menu'] = array(
    'page callback' => 'gsb_field_authors_update_visibility',
    'page arguments' => array(2, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 2, 3),
    // This passes the $entity_type to the load function along with $entity_id.
    'load arguments' => array(2),
    // The callback will be returning AJAX, never HTML.
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu loader for an entity.
 */
function gsb_field_authors_entity_menu_load($entity_id, $entity_type) {
  return entity_load_single($entity_type, $entity_id);
}

/**
 * Updates the visibility of an author.
 */
function gsb_field_authors_update_visibility($entity_type, $entity) {
  if (!isset($_POST['profile_visibility_value']) || !is_numeric($_POST['profile_visibility_value'])) {
    return;
  }

  // Load the entity and save the new value.
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $wrapper->field_profile_visibility = $_POST['profile_visibility_value'];
  $wrapper->save();

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array('command' => 'gsb_field_authors_result'),
    ),
  );
}

/**
 * Implements hook_field_views_data_alter().
 */
function gsb_field_authors_field_views_data_alter(&$data, $field, $module) {
  if ($field['field_name'] == 'field_profile_visibility') {
    foreach ($data as $table_name => $table_data) {
      if (isset($table_data[$field['field_name']]['field'])) {
        $data[$table_name][$field['field_name']]['field']['handler'] = 'gsb_field_authors_handler_field_profile_visibility';
      }
    }
  }
}

/**
 * Returns the list of profile visibility options base on content type.
 * For publication we add the 'Featured' option
 */
function gsb_field_authors_get_allowed_profile_visibility($field, $instance, $entity_type, $entity, &$cacheable) {
  // This needs to be checked for every field.
  $cacheable = FALSE;

  // If this is a field collection item, use the bundle of the host entity.
  if ($entity instanceof FieldCollectionItemEntity) {
    $bundle = $entity->hostEntityBundle();
  }
  // Otherwise, extract it from the entity itself.
  elseif ($entity) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = '';
  }

  if ($bundle != 'publication') {
    return array(
      0 => 'Hidden',
      1 => 'Visible',
    );
  }
  else {
    return array(
      0 => 'Hidden',
      1 => 'Visible',
      2 => 'Featured',
    );
  }
}
